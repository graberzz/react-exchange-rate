{"version":3,"sources":["CurrencyInput.tsx","api.ts","CurrencyChart.tsx","utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CurrencyInput","value","onValueChange","base","baseOptions","onBaseChange","Box","display","mr","TextField","inputProps","min","type","variant","onChange","evt","target","Select","native","map","key","getExchangeRate","a","axios","get","data","getExchangeRateHistory","range","symbols","start","end","join","rates","transformRateHistory","rateHistory","Object","entries","i","date","values","CurrencyChart","baseFrom","baseTo","format","initialState","DateTime","local","minus","days","toFormat","useReducer","state","action","now","months","years","dispatch","useState","chartData","setChartData","useEffect","fetchHistory","justifyContent","Button","onClick","Paper","width","height","alignItems","argumentField","valueField","CircularProgress","convert","from","to","rate","toFixed","App","isLoading","setIsLoading","valueFrom","setValueFrom","setBaseFrom","valueTo","setValueTo","setBaseTo","setRate","fetchRate","keys","size","Card","style","flexWrap","p","mb","fontSize","marginBottom","flexDirection","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c5c6ebf1.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Select from '@material-ui/core/Select'\nimport { Box } from '@material-ui/core'\n\ninterface CurrencyInputProps {\n  value: number\n  onValueChange?(value: number): void\n  base: string\n  baseOptions: string[]\n  onBaseChange?(base: string): void\n}\n\nconst CurrencyInput: React.FC<CurrencyInputProps> = ({\n  value,\n  onValueChange,\n  base,\n  baseOptions,\n  onBaseChange,\n}) => {\n  function handleValueChange(evt: React.ChangeEvent<HTMLInputElement>) {\n    onValueChange && onValueChange(+evt.target.value)\n  }\n\n  function handleBaseChange(evt: React.ChangeEvent<{ value: unknown }>) {\n    onBaseChange && onBaseChange(evt.target.value as string)\n  }\n\n  return (\n    <Box display=\"flex\">\n      <Box mr={2}>\n        <TextField\n          inputProps={{\n            min: 0,\n            'data-testid': 'currency-input-input',\n          }}\n          type=\"number\"\n          variant=\"outlined\"\n          value={value}\n          onChange={handleValueChange}\n        />\n      </Box>\n      <Select\n        inputProps={{\n          'data-testid': 'currency-input-select',\n        }}\n        variant=\"outlined\"\n        native\n        value={base}\n        onChange={handleBaseChange}\n      >\n        {baseOptions.map(base => (\n          <option key={base} value={base}>\n            {base}\n          </option>\n        ))}\n      </Select>\n    </Box>\n  )\n}\n\nexport default CurrencyInput\n","import axios from 'axios'\n\nexport interface Rate {\n  rates: Record<string, number>\n  base: string\n  date?: string\n}\nexport const getExchangeRate = async (base?: string): Promise<Rate> => {\n  const { data } = await axios.get(\n    `https://api.exchangeratesapi.io/latest${base ? `?base=${base}` : ''}`,\n  )\n\n  return data\n}\n\nexport const getBaseList = async (): Promise<string[]> => {\n  const rate = await getExchangeRate('USD')\n\n  return Object.keys(rate.rates)\n}\n\nexport interface Range {\n  start: string\n  end: string\n}\n\nexport type RateHistory = Record<string, Record<string, number>>\n\nexport const getExchangeRateHistory = async (\n  range: Range,\n  ...symbols: string[]\n): Promise<RateHistory> => {\n  const { data } = await axios.get(\n    `https://api.exchangeratesapi.io/history?start_at=${range.start}&end_at=${\n      range.end\n    }&symbols=${symbols.join(',')}&base=USD`,\n  )\n\n  return data.rates\n}\n","import React, { useReducer, useState, useEffect } from 'react'\nimport { Paper, Box, Button, CircularProgress } from '@material-ui/core'\nimport {\n  ValueAxis,\n  Chart,\n  LineSeries,\n  ZoomAndPan,\n  Tooltip,\n} from '@devexpress/dx-react-chart-material-ui'\nimport { EventTracker } from '@devexpress/dx-react-chart'\nimport { DateTime } from 'luxon'\nimport { getExchangeRateHistory, RateHistory } from './api'\n\ninterface ChartData {\n  date: string\n  value: number\n}\nexport function transformRateHistory(rateHistory: RateHistory): ChartData[] {\n  return Object.entries(rateHistory).map(([date, symbols], i) => {\n    const value = Object.values(symbols)[0]\n    return { date, value }\n  })\n}\n\ninterface CurrencyChartProps {\n  baseFrom: string\n  baseTo: string\n}\nconst CurrencyChart: React.FC<CurrencyChartProps> = ({ baseFrom, baseTo }) => {\n  interface State {\n    start: string\n    end: string\n  }\n\n  const format = 'yyyy-MM-dd'\n  const initialState: State = {\n    start: DateTime.local()\n      .minus({ days: 5 })\n      .toFormat(format),\n    end: DateTime.local().toFormat(format),\n  }\n\n  function reducer(state = initialState, action: any): State {\n    const now = DateTime.local()\n\n    switch (action.type) {\n      case 'UPDATE_CHART_5D':\n        return {\n          ...state,\n          start: now.minus({ days: 5 }).toFormat(format),\n        }\n      case 'UPDATE_CHART_1M':\n        return {\n          ...state,\n          start: now.minus({ months: 1 }).toFormat(format),\n        }\n      case 'UPDATE_CHART_1Y':\n        return {\n          ...state,\n          start: now.minus({ years: 1 }).toFormat(format),\n        }\n    }\n\n    return state\n  }\n  const [range, dispatch] = useReducer(reducer, initialState)\n\n  const [chartData, setChartData] = useState<ChartData[]>()\n\n  useEffect(() => {\n    async function fetchHistory() {\n      const rateHistory = await getExchangeRateHistory(range, baseFrom, baseTo)\n      setChartData(transformRateHistory(rateHistory))\n    }\n\n    fetchHistory()\n  }, [range, baseFrom, baseTo])\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Button onClick={() => dispatch({ type: 'UPDATE_CHART_5D' })}>\n          5D\n        </Button>\n        <Button onClick={() => dispatch({ type: 'UPDATE_CHART_1M' })}>\n          1M\n        </Button>\n        <Button onClick={() => dispatch({ type: 'UPDATE_CHART_1Y' })}>\n          1Y\n        </Button>\n      </Box>\n\n      <Paper>\n        <Box\n          width={300}\n          height={200}\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          {chartData ? (\n            <Chart data={chartData} width={300} height={200}>\n              <ValueAxis />\n\n              <LineSeries argumentField=\"date\" valueField=\"value\" />\n              <ZoomAndPan />\n              <EventTracker />\n              <Tooltip />\n            </Chart>\n          ) : (\n            <CircularProgress />\n          )}\n        </Box>\n      </Paper>\n    </>\n  )\n}\n\nexport default CurrencyChart\n","\n\nimport { Rate } from './api'\n\nexport function convert(value: number, from: string, to: string, rate?: Rate): number {\n  if (!rate?.rates[to] || !rate?.rates[from]) return value\n  return +((rate?.rates[to] / rate?.rates[from]) * value).toFixed(2)\n}","import React, { useState, useEffect } from 'react'\nimport { Card, Box, CircularProgress } from '@material-ui/core'\nimport CurrencyInput from './CurrencyInput'\nimport CurrencyChart from './CurrencyChart'\nimport { getExchangeRate, Rate } from './api'\nimport { convert } from './utils'\nimport './App.css'\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true)\n\n  const [valueFrom, setValueFrom] = useState(1)\n  const [baseFrom, setBaseFrom] = useState('USD')\n\n  const [valueTo, setValueTo] = useState(1)\n  const [baseTo, setBaseTo] = useState('RUB')\n\n  useEffect(() => {\n    setValueFrom(convert(valueTo, baseTo, baseFrom, rate))\n  }, [valueTo])\n\n  useEffect(() => {\n    setValueTo(convert(valueFrom, baseFrom, baseTo, rate))\n  }, [baseFrom, baseTo])\n\n  const [rate, setRate] = useState<Rate>()\n\n  useEffect(() => {\n    async function fetchRate() {\n      const rate = await getExchangeRate('USD')\n      setRate(rate)\n\n      setValueTo(convert(valueFrom, baseFrom, baseTo, rate))\n\n      setIsLoading(false)\n    }\n\n    fetchRate()\n  }, [])\n\n  function handleValueFromChange(valueFrom: number) {\n    setValueFrom(valueFrom)\n    setValueTo(convert(valueFrom, baseFrom, baseTo, rate))\n  }\n\n  const baseOptions = Object.keys(rate?.rates ?? {})\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      width=\"100vw\"\n      height=\"100vh\"\n    >\n      {isLoading ? (\n        <CircularProgress size={80} />\n      ) : (\n        <Card variant=\"outlined\" style={{ display: 'inline-block' }}>\n          <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\" p={2}>\n            <Box mr={2} mb={2}>\n              {valueFrom} {baseFrom} equals\n              <div style={{ fontSize: '36px', marginBottom: '16px' }}>\n                {valueTo} {baseTo}\n              </div>\n              <Box mb={2}>\n                <CurrencyInput\n                  value={valueFrom}\n                  onValueChange={handleValueFromChange}\n                  base={baseFrom}\n                  onBaseChange={setBaseFrom}\n                  baseOptions={baseOptions}\n                />\n              </Box>\n              <CurrencyInput\n                value={valueTo}\n                onValueChange={setValueTo}\n                base={baseTo}\n                onBaseChange={setBaseTo}\n                baseOptions={baseOptions}\n              />\n            </Box>\n            <Box display=\"flex\" flexDirection=\"column\">\n              <CurrencyChart baseFrom={baseFrom} baseTo={baseTo} />\n            </Box>\n          </Box>\n        </Card>\n      )}\n    </Box>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}